package data;

struct robot_parameters
{
    int16_t id;
    boolean has_kicker;
	int16_t skill;
	int16_t role;
}

struct game_controller
{
	float designated_position_x;
	float designated_position_y;
	int16_t current_command;
	int16_t game_event;
}

struct tartarus
{
	boolean ssl_vision; //alternates between using ssl-vision or grsim for vision data
	boolean autoreferee; //alternates between use ssl-vision vision data or tigers AR vision data
	boolean competition_mode; //when activated will change every variable to competition mode 
	boolean bool_controller; //turn on or off the controller mode
	boolean debug_mode; //turn on or off the debug mode
	boolean half_field; //turn on or off using the half of the field
	boolean iris_as_GC; //turn iris as a game-controller

	int16_t goalkeeper_id; // changes keeper id
	int16_t cams_number; // says the number of cameras in the vision system [0,4]
	int16_t stm_port; //changes the stm connected port via UI
	int16_t mcast_port_gc; // default 10003
	int16_t mcast_port_vision_sslvision; // default 10006
	int16_t mcast_port_vision_grsim; // default 10020
	int16_t mcast_port_vision_tracked; // default 10010 "we use the tigers autoreferee"

	boolean team_blue; //changes the team (not recommended for use in competitions)
	robot_parameters robots[16];
	game_controller iris_gc;
}