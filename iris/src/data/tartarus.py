"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class tartarus(object):

    __slots__ = ["ssl_vision", "team_blue"]

    __typenames__ = ["boolean", "boolean"]

    __dimensions__ = [None, None]

    def __init__(self):
        self.ssl_vision = False
        """ LCM Type: boolean """
        self.team_blue = False
        """
        alterna entre usar o ssl-vision ou o GrSim para receber dados de visÃ£o
        LCM Type: boolean
        """


    def encode(self):
        buf = BytesIO()
        buf.write(tartarus._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bb", self.ssl_vision, self.team_blue))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tartarus._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tartarus._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = tartarus()
        self.ssl_vision = bool(struct.unpack('b', buf.read(1))[0])
        self.team_blue = bool(struct.unpack('b', buf.read(1))[0])
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if tartarus in parents: return 0
        tmphash = (0xd0f2998d93e9865f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if tartarus._packed_fingerprint is None:
            tartarus._packed_fingerprint = struct.pack(">Q", tartarus._get_hash_recursive([]))
        return tartarus._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", tartarus._get_packed_fingerprint())[0]

