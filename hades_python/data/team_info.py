"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class team_info(object):

    __slots__ = ["name", "score", "red_cards", "yellow_cards", "timeouts", "timeout_time", "goalkeeper_id", "fouls", "bot_substituitions", "bot_substituitions_time"]

    __typenames__ = ["string", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.name = ""
        """ LCM Type: string """
        self.score = 0
        """ LCM Type: int16_t """
        self.red_cards = 0
        """ LCM Type: int16_t """
        self.yellow_cards = 0
        """ LCM Type: int16_t """
        self.timeouts = 0
        """
        int16_t yellow_card_time[yellow_cards];
        LCM Type: int16_t
        """

        self.timeout_time = 0
        """ LCM Type: int16_t """
        self.goalkeeper_id = 0
        """ LCM Type: int16_t """
        self.fouls = 0
        """ LCM Type: int16_t """
        self.bot_substituitions = 0
        """ LCM Type: int16_t """
        self.bot_substituitions_time = 0
        """ LCM Type: int16_t """

    def encode(self):
        buf = BytesIO()
        buf.write(team_info._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __name_encoded = self.name.encode('utf-8')
        buf.write(struct.pack('>I', len(__name_encoded)+1))
        buf.write(__name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">hhhhhhhhh", self.score, self.red_cards, self.yellow_cards, self.timeouts, self.timeout_time, self.goalkeeper_id, self.fouls, self.bot_substituitions, self.bot_substituitions_time))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != team_info._get_packed_fingerprint():
            raise ValueError("Decode error")
        return team_info._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = team_info()
        __name_len = struct.unpack('>I', buf.read(4))[0]
        self.name = buf.read(__name_len)[:-1].decode('utf-8', 'replace')
        self.score, self.red_cards, self.yellow_cards, self.timeouts, self.timeout_time, self.goalkeeper_id, self.fouls, self.bot_substituitions, self.bot_substituitions_time = struct.unpack(">hhhhhhhhh", buf.read(18))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if team_info in parents: return 0
        tmphash = (0x1d7a1b63bcc242a2) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if team_info._packed_fingerprint is None:
            team_info._packed_fingerprint = struct.pack(">Q", team_info._get_hash_recursive([]))
        return team_info._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", team_info._get_packed_fingerprint())[0]

