"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class kicked_ball_tracked(object):

    __slots__ = ["position", "vel", "kicked_timestamp", "stop_timestamp", "stop_position", "robot_who_kicked"]

    __typenames__ = ["float", "float", "double", "double", "float", "int16_t"]

    __dimensions__ = [[2], [3], None, None, [2], [2]]

    def __init__(self):
        self.position = [ 0.0 for dim0 in range(2) ]
        """ LCM Type: float[2] """
        self.vel = [ 0.0 for dim0 in range(3) ]
        """
        mm
        LCM Type: float[3]
        """

        self.kicked_timestamp = 0.0
        """
        mm/s
        LCM Type: double
        """

        self.stop_timestamp = 0.0
        """
        The unix timestamp [s] when the kick was performed
        LCM Type: double
        """

        self.stop_position = [ 0.0 for dim0 in range(2) ]
        """
        The predicted unix timestamp [s] when the ball comes to a stop
        LCM Type: float[2]
        """

        self.robot_who_kicked = [ 0 for dim0 in range(2) ]
        """
        The predicted position [m] at which the ball will come to a stop
        LCM Type: int16_t[2]
        """


    def encode(self):
        buf = BytesIO()
        buf.write(kicked_ball_tracked._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2f', *self.position[:2]))
        buf.write(struct.pack('>3f', *self.vel[:3]))
        buf.write(struct.pack(">dd", self.kicked_timestamp, self.stop_timestamp))
        buf.write(struct.pack('>2f', *self.stop_position[:2]))
        buf.write(struct.pack('>2h', *self.robot_who_kicked[:2]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != kicked_ball_tracked._get_packed_fingerprint():
            raise ValueError("Decode error")
        return kicked_ball_tracked._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = kicked_ball_tracked()
        self.position = struct.unpack('>2f', buf.read(8))
        self.vel = struct.unpack('>3f', buf.read(12))
        self.kicked_timestamp, self.stop_timestamp = struct.unpack(">dd", buf.read(16))
        self.stop_position = struct.unpack('>2f', buf.read(8))
        self.robot_who_kicked = struct.unpack('>2h', buf.read(4))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if kicked_ball_tracked in parents: return 0
        tmphash = (0x4f91eda13b1d000b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if kicked_ball_tracked._packed_fingerprint is None:
            kicked_ball_tracked._packed_fingerprint = struct.pack(">Q", kicked_ball_tracked._get_hash_recursive([]))
        return kicked_ball_tracked._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", kicked_ball_tracked._get_packed_fingerprint())[0]

