"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class detection_robots(object):

    __slots__ = ["robot_id", "position_x", "position_y", "orientation"]

    __typenames__ = ["int16_t", "float", "float", "float"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.robot_id = 0
        """ LCM Type: int16_t """
        self.position_x = 0.0
        """ LCM Type: float """
        self.position_y = 0.0
        """
        mm
        LCM Type: float
        """

        self.orientation = 0.0
        """
        mm
        LCM Type: float
        """


    def encode(self):
        buf = BytesIO()
        buf.write(detection_robots._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hfff", self.robot_id, self.position_x, self.position_y, self.orientation))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != detection_robots._get_packed_fingerprint():
            raise ValueError("Decode error")
        return detection_robots._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = detection_robots()
        self.robot_id, self.position_x, self.position_y, self.orientation = struct.unpack(">hfff", buf.read(14))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if detection_robots in parents: return 0
        tmphash = (0x5cefce394113435c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if detection_robots._packed_fingerprint is None:
            detection_robots._packed_fingerprint = struct.pack(">Q", detection_robots._get_hash_recursive([]))
        return detection_robots._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", detection_robots._get_packed_fingerprint())[0]

