"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import data

class ia(object):

    __slots__ = ["timestamp", "estrategia", "processo", "robots_size", "robots"]

    __typenames__ = ["int64_t", "int16_t", "int16_t", "int16_t", "data.robot"]

    __dimensions__ = [None, None, None, None, [16]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.estrategia = 0
        """ LCM Type: int16_t """
        self.processo = 0
        """
        diz a estrategia atual dos robos
        LCM Type: int16_t
        """

        self.robots_size = 0
        """
        diz o processo atual do Hades(IA)
        LCM Type: int16_t
        """

        self.robots = [ data.robot() for dim0 in range(16) ]
        """ LCM Type: data.robot[16] """

    def encode(self):
        buf = BytesIO()
        buf.write(ia._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qhhh", self.timestamp, self.estrategia, self.processo, self.robots_size))
        for i0 in range(16):
            assert self.robots[i0]._get_packed_fingerprint() == data.robot._get_packed_fingerprint()
            self.robots[i0]._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ia._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ia._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = ia()
        self.timestamp, self.estrategia, self.processo, self.robots_size = struct.unpack(">qhhh", buf.read(14))
        self.robots = []
        for i0 in range(16):
            self.robots.append(data.robot._decode_one(buf))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if ia in parents: return 0
        newparents = parents + [ia]
        tmphash = (0x7c342bde0e4cf528+ data.robot._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if ia._packed_fingerprint is None:
            ia._packed_fingerprint = struct.pack(">Q", ia._get_hash_recursive([]))
        return ia._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ia._get_packed_fingerprint())[0]

