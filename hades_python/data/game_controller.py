"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import data

class game_controller(object):
    """ main struct """

    __slots__ = ["team_blue", "yellow", "blue", "designated_position_x", "designated_position_y", "current_command", "game_event"]

    __typenames__ = ["boolean", "data.team_info", "data.team_info", "float", "float", "int16_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.team_blue = False
        """ LCM Type: boolean """
        self.yellow = data.team_info()
        """ LCM Type: data.team_info """
        self.blue = data.team_info()
        """ LCM Type: data.team_info """
        self.designated_position_x = 0.0
        """ LCM Type: float """
        self.designated_position_y = 0.0
        """ LCM Type: float """
        self.current_command = 0
        """ LCM Type: int16_t """
        self.game_event = 0
        """ LCM Type: int16_t """

    def encode(self):
        buf = BytesIO()
        buf.write(game_controller._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.team_blue))
        assert self.yellow._get_packed_fingerprint() == data.team_info._get_packed_fingerprint()
        self.yellow._encode_one(buf)
        assert self.blue._get_packed_fingerprint() == data.team_info._get_packed_fingerprint()
        self.blue._encode_one(buf)
        buf.write(struct.pack(">ffhh", self.designated_position_x, self.designated_position_y, self.current_command, self.game_event))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != game_controller._get_packed_fingerprint():
            raise ValueError("Decode error")
        return game_controller._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = game_controller()
        self.team_blue = bool(struct.unpack('b', buf.read(1))[0])
        self.yellow = data.team_info._decode_one(buf)
        self.blue = data.team_info._decode_one(buf)
        self.designated_position_x, self.designated_position_y, self.current_command, self.game_event = struct.unpack(">ffhh", buf.read(12))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if game_controller in parents: return 0
        newparents = parents + [game_controller]
        tmphash = (0x925561e1a491f4dc+ data.team_info._get_hash_recursive(newparents)+ data.team_info._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if game_controller._packed_fingerprint is None:
            game_controller._packed_fingerprint = struct.pack(">Q", game_controller._get_hash_recursive([]))
        return game_controller._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", game_controller._get_packed_fingerprint())[0]

