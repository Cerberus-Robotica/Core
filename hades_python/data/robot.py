"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class robot(object):

    __slots__ = ["id", "spinner", "kick", "vel_tang", "vel_normal", "vel_ang", "kick_speed_x", "kick_speed_z", "wheel_speed", "wheel_fr", "wheel_fl", "wheel_bl", "wheel_br"]

    __typenames__ = ["int16_t", "boolean", "boolean", "float", "float", "float", "float", "float", "boolean", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.id = 0
        """ LCM Type: int16_t """
        self.spinner = False
        """ LCM Type: boolean """
        self.kick = False
        """ LCM Type: boolean """
        self.vel_tang = 0.0
        """ LCM Type: float """
        self.vel_normal = 0.0
        """ LCM Type: float """
        self.vel_ang = 0.0
        """ LCM Type: float """
        self.kick_speed_x = 0.0
        """ LCM Type: float """
        self.kick_speed_z = 0.0
        """ LCM Type: float """
        self.wheel_speed = False
        """ LCM Type: boolean """
        self.wheel_fr = 0.0
        """ LCM Type: float """
        self.wheel_fl = 0.0
        """
        wheel front right;
        LCM Type: float
        """

        self.wheel_bl = 0.0
        """
        wheel front left;
        LCM Type: float
        """

        self.wheel_br = 0.0
        """
        wheel back left;
        LCM Type: float
        """


    def encode(self):
        buf = BytesIO()
        buf.write(robot._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">hbbfffffbffff", self.id, self.spinner, self.kick, self.vel_tang, self.vel_normal, self.vel_ang, self.kick_speed_x, self.kick_speed_z, self.wheel_speed, self.wheel_fr, self.wheel_fl, self.wheel_bl, self.wheel_br))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = robot()
        self.id = struct.unpack(">h", buf.read(2))[0]
        self.spinner = bool(struct.unpack('b', buf.read(1))[0])
        self.kick = bool(struct.unpack('b', buf.read(1))[0])
        self.vel_tang, self.vel_normal, self.vel_ang, self.kick_speed_x, self.kick_speed_z = struct.unpack(">fffff", buf.read(20))
        self.wheel_speed = bool(struct.unpack('b', buf.read(1))[0])
        self.wheel_fr, self.wheel_fl, self.wheel_bl, self.wheel_br = struct.unpack(">ffff", buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if robot in parents: return 0
        tmphash = (0x86049ef78a47a59c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if robot._packed_fingerprint is None:
            robot._packed_fingerprint = struct.pack(">Q", robot._get_hash_recursive([]))
        return robot._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", robot._get_packed_fingerprint())[0]

