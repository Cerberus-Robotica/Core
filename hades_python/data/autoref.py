"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

import data

class autoref(object):
    """ main struct """

    __slots__ = ["timestamp", "robots_yellow_size", "robots_blue_size", "robots_yellow", "robots_blue", "balls", "kicked_ball"]

    __typenames__ = ["int64_t", "int16_t", "int16_t", "data.detection_robots_tracked", "data.detection_robots_tracked", "data.detection_balls_tracked", "data.kicked_ball_tracked"]

    __dimensions__ = [None, None, None, ["robots_yellow_size"], ["robots_blue_size"], None, None]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.robots_yellow_size = 0
        """
        s
        LCM Type: int16_t
        """

        self.robots_blue_size = 0
        """ LCM Type: int16_t """
        self.robots_yellow = []
        """ LCM Type: data.detection_robots_tracked[robots_yellow_size] """
        self.robots_blue = []
        """ LCM Type: data.detection_robots_tracked[robots_blue_size] """
        self.balls = data.detection_balls_tracked()
        """ LCM Type: data.detection_balls_tracked """
        self.kicked_ball = data.kicked_ball_tracked()
        """ LCM Type: data.kicked_ball_tracked """

    def encode(self):
        buf = BytesIO()
        buf.write(autoref._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qhh", self.timestamp, self.robots_yellow_size, self.robots_blue_size))
        for i0 in range(self.robots_yellow_size):
            assert self.robots_yellow[i0]._get_packed_fingerprint() == data.detection_robots_tracked._get_packed_fingerprint()
            self.robots_yellow[i0]._encode_one(buf)
        for i0 in range(self.robots_blue_size):
            assert self.robots_blue[i0]._get_packed_fingerprint() == data.detection_robots_tracked._get_packed_fingerprint()
            self.robots_blue[i0]._encode_one(buf)
        assert self.balls._get_packed_fingerprint() == data.detection_balls_tracked._get_packed_fingerprint()
        self.balls._encode_one(buf)
        assert self.kicked_ball._get_packed_fingerprint() == data.kicked_ball_tracked._get_packed_fingerprint()
        self.kicked_ball._encode_one(buf)

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != autoref._get_packed_fingerprint():
            raise ValueError("Decode error")
        return autoref._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = autoref()
        self.timestamp, self.robots_yellow_size, self.robots_blue_size = struct.unpack(">qhh", buf.read(12))
        self.robots_yellow = []
        for i0 in range(self.robots_yellow_size):
            self.robots_yellow.append(data.detection_robots_tracked._decode_one(buf))
        self.robots_blue = []
        for i0 in range(self.robots_blue_size):
            self.robots_blue.append(data.detection_robots_tracked._decode_one(buf))
        self.balls = data.detection_balls_tracked._decode_one(buf)
        self.kicked_ball = data.kicked_ball_tracked._decode_one(buf)
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if autoref in parents: return 0
        newparents = parents + [autoref]
        tmphash = (0xf300c55f3b65804b+ data.detection_robots_tracked._get_hash_recursive(newparents)+ data.detection_robots_tracked._get_hash_recursive(newparents)+ data.detection_balls_tracked._get_hash_recursive(newparents)+ data.kicked_ball_tracked._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if autoref._packed_fingerprint is None:
            autoref._packed_fingerprint = struct.pack(">Q", autoref._get_hash_recursive([]))
        return autoref._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", autoref._get_packed_fingerprint())[0]

