"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class detection_balls_tracked(object):

    __slots__ = ["position_x", "position_y", "vel_x", "vel_y"]

    __typenames__ = ["float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.position_x = 0.0
        """ LCM Type: float """
        self.position_y = 0.0
        """
        The position (x, y) [mm] in the ssl-vision coordinate system
        LCM Type: float
        """

        self.vel_x = 0.0
        """ LCM Type: float """
        self.vel_y = 0.0
        """
        The velocity [mm/s] in the ssl-vision coordinate system
        LCM Type: float
        """


    def encode(self):
        buf = BytesIO()
        buf.write(detection_balls_tracked._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ffff", self.position_x, self.position_y, self.vel_x, self.vel_y))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != detection_balls_tracked._get_packed_fingerprint():
            raise ValueError("Decode error")
        return detection_balls_tracked._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = detection_balls_tracked()
        self.position_x, self.position_y, self.vel_x, self.vel_y = struct.unpack(">ffff", buf.read(16))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if detection_balls_tracked in parents: return 0
        tmphash = (0x262ecc4074fe1ccd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if detection_balls_tracked._packed_fingerprint is None:
            detection_balls_tracked._packed_fingerprint = struct.pack(">Q", detection_balls_tracked._get_hash_recursive([]))
        return detection_balls_tracked._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", detection_balls_tracked._get_packed_fingerprint())[0]

