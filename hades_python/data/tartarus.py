"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class tartarus(object):

    __slots__ = ["ssl_vision", "autoreferee", "competition_mode", "team_blue", "bool_controller", "stm_port", "controller_port", "goalkeeper_id", "mcast_grp_gc", "mcast_port_gc", "mcast_grp_vision", "mcast_port_vision_sslvision", "mcast_port_vision_grsim", "mcast_port_vision_tracked"]

    __typenames__ = ["boolean", "boolean", "boolean", "boolean", "boolean", "int16_t", "int16_t", "int16_t", "string", "int16_t", "string", "int16_t", "int16_t", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.ssl_vision = False
        """ LCM Type: boolean """
        self.autoreferee = False
        """
        alternates between using ssl-vision or grsim for vision data
        LCM Type: boolean
        """

        self.competition_mode = False
        """
        alternates between use ssl-vision vision data or tigers AR vision data
        LCM Type: boolean
        """

        self.team_blue = False
        """
        alternates between the competition_mode or debug(controller mode will be activated)
        LCM Type: boolean
        """

        self.bool_controller = False
        """
        changes the team (not recommended for use in competitions)
        LCM Type: boolean
        """

        self.stm_port = 0
        """
        turn on or off the controller mode
        LCM Type: int16_t
        """

        self.controller_port = 0
        """
        changes the stm connected port via UI
        LCM Type: int16_t
        """

        self.goalkeeper_id = 0
        """
        changes the controller port via UI
        LCM Type: int16_t
        """

        self.mcast_grp_gc = ""
        """
        changes keeper id
        LCM Type: string
        """

        self.mcast_port_gc = 0
        """
        default "224.5.23.1"
        LCM Type: int16_t
        """

        self.mcast_grp_vision = ""
        """
        default 10003
        LCM Type: string
        """

        self.mcast_port_vision_sslvision = 0
        """
        default "224.5.23.2"
        LCM Type: int16_t
        """

        self.mcast_port_vision_grsim = 0
        """
        default 10006
        LCM Type: int16_t
        """

        self.mcast_port_vision_tracked = 0
        """
        default 10020
        LCM Type: int16_t
        """


    def encode(self):
        buf = BytesIO()
        buf.write(tartarus._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbbbbhhh", self.ssl_vision, self.autoreferee, self.competition_mode, self.team_blue, self.bool_controller, self.stm_port, self.controller_port, self.goalkeeper_id))
        __mcast_grp_gc_encoded = self.mcast_grp_gc.encode('utf-8')
        buf.write(struct.pack('>I', len(__mcast_grp_gc_encoded)+1))
        buf.write(__mcast_grp_gc_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">h", self.mcast_port_gc))
        __mcast_grp_vision_encoded = self.mcast_grp_vision.encode('utf-8')
        buf.write(struct.pack('>I', len(__mcast_grp_vision_encoded)+1))
        buf.write(__mcast_grp_vision_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">hhh", self.mcast_port_vision_sslvision, self.mcast_port_vision_grsim, self.mcast_port_vision_tracked))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tartarus._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tartarus._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = tartarus()
        self.ssl_vision = bool(struct.unpack('b', buf.read(1))[0])
        self.autoreferee = bool(struct.unpack('b', buf.read(1))[0])
        self.competition_mode = bool(struct.unpack('b', buf.read(1))[0])
        self.team_blue = bool(struct.unpack('b', buf.read(1))[0])
        self.bool_controller = bool(struct.unpack('b', buf.read(1))[0])
        self.stm_port, self.controller_port, self.goalkeeper_id = struct.unpack(">hhh", buf.read(6))
        __mcast_grp_gc_len = struct.unpack('>I', buf.read(4))[0]
        self.mcast_grp_gc = buf.read(__mcast_grp_gc_len)[:-1].decode('utf-8', 'replace')
        self.mcast_port_gc = struct.unpack(">h", buf.read(2))[0]
        __mcast_grp_vision_len = struct.unpack('>I', buf.read(4))[0]
        self.mcast_grp_vision = buf.read(__mcast_grp_vision_len)[:-1].decode('utf-8', 'replace')
        self.mcast_port_vision_sslvision, self.mcast_port_vision_grsim, self.mcast_port_vision_tracked = struct.unpack(">hhh", buf.read(6))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if tartarus in parents: return 0
        tmphash = (0x7c5bbeb22ee8ee8e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if tartarus._packed_fingerprint is None:
            tartarus._packed_fingerprint = struct.pack(">Q", tartarus._get_hash_recursive([]))
        return tartarus._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", tartarus._get_packed_fingerprint())[0]

