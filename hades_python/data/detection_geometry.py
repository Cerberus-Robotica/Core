"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class detection_geometry(object):

    __slots__ = ["field_length", "field_width", "goal_width", "goal_depth", "boundary_width", "center_circle_radius", "defense_area_width", "defense_area_height", "line_thickness", "goal_center_to_penalty_mark", "goal_height", "ball_radius", "max_robot_radius"]

    __typenames__ = ["int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "int32_t", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.field_length = 0
        """ LCM Type: int32_t """
        self.field_width = 0
        """
        mm
        LCM Type: int32_t
        """

        self.goal_width = 0
        """
        mm
        LCM Type: int32_t
        """

        self.goal_depth = 0
        """
        mm
        LCM Type: int32_t
        """

        self.boundary_width = 0
        """
        mm
        LCM Type: int32_t
        """

        self.center_circle_radius = 0
        """
        mm
        LCM Type: int32_t
        """

        self.defense_area_width = 0
        """
        mm
        LCM Type: int32_t
        """

        self.defense_area_height = 0
        """
        mm (equivalente a penalty_area_width)
        LCM Type: int32_t
        """

        self.line_thickness = 0
        """
        mm (equivalente a penalty_area_depth)
        LCM Type: int32_t
        """

        self.goal_center_to_penalty_mark = 0
        """
        mm
        LCM Type: int32_t
        """

        self.goal_height = 0
        """
        mm
        LCM Type: int32_t
        """

        self.ball_radius = 0.0
        """
        mm
        LCM Type: float
        """

        self.max_robot_radius = 0.0
        """
        mm
        LCM Type: float
        """


    def encode(self):
        buf = BytesIO()
        buf.write(detection_geometry._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iiiiiiiiiiiff", self.field_length, self.field_width, self.goal_width, self.goal_depth, self.boundary_width, self.center_circle_radius, self.defense_area_width, self.defense_area_height, self.line_thickness, self.goal_center_to_penalty_mark, self.goal_height, self.ball_radius, self.max_robot_radius))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != detection_geometry._get_packed_fingerprint():
            raise ValueError("Decode error")
        return detection_geometry._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = detection_geometry()
        self.field_length, self.field_width, self.goal_width, self.goal_depth, self.boundary_width, self.center_circle_radius, self.defense_area_width, self.defense_area_height, self.line_thickness, self.goal_center_to_penalty_mark, self.goal_height, self.ball_radius, self.max_robot_radius = struct.unpack(">iiiiiiiiiiiff", buf.read(52))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if detection_geometry in parents: return 0
        tmphash = (0x6c0154aefe4088e6) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if detection_geometry._packed_fingerprint is None:
            detection_geometry._packed_fingerprint = struct.pack(">Q", detection_geometry._get_hash_recursive([]))
        return detection_geometry._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", detection_geometry._get_packed_fingerprint())[0]

