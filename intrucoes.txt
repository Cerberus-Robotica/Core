Primeiro(Instalação):

	Não utilize os softwares da SSL, como o ssl-vision e o game-controller, instalados localmente, utilize Docker para rodar os softwares da competição(comandos em init_softwares_competicao.txt);

	Tutorial de instalação da bilioteca Docker em "Programação/Frameworks da SSL/Tutorial para instalar os softwares da SSL" no drive da equipe Cerberus.
	
	
	Instalar LCM(c++):

		~$ sudo apt install liblcm-dev
		
	Caso enfrente problemas na hora de buildar o software relacionado à biblioteca LCM, dê uma olhada em "Programação/Frameworks da SSL/Erros de software e biblioteca".


Segundo(construir o framework):

	Construa os três programas em C++ (com o terminal aberto na pasta InterCom_Cerberus_X.X.X):

		 ~$ cd caronte && mkdir build && cd build/ && cmake .. && make -j4 && cd ../../hermes && mkdir build && cd build/ && cmake .. && make -j4 && cd ../../hades && mkdir build && cd build/ && cmake .. && make -j4 && cd ../..



Finalmente(rodar):

	Rodar o executável em python (com o terminal aberto na pasta principal):
	
		~$ /bin/python3 ./iris/src/main.py

	Rodar os executáveis (com o terminal aberto na pasta principal):

		~$ ./hades/build/hades
		~$ ./hermes/build/hermes
		~$ ./caronte/build/caronte

		Ou dar dois clicks no executável nas pastas build/.
	
OBS: Rodar o main.py pelo VS code diminui em 15Hz a taxa de atualização do software em comparação com o terminal do linux, além de que o VS code consome uma RAM desgraçada.

Antes de subir os arquivos novos/atualizados para o github/core, exclua os diretórios de build.

	~$ cd caronte && rm -rf build && cd ../hades && rm -rf build && cd ../hermes && rm -rf build && cd ..
